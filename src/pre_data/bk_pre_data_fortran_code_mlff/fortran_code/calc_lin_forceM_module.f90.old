  !// forquill v1.01 beta www.fcode.cn
module calc_lin
    !implicit double precision (a-h, o-z)
    implicit none
  
  
    !cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc 
    !integer, allocatable, dimension (:) :: iatom, iatom_type, itype_atom
    !real *8, allocatable, dimension (:) :: energy, energy_pred
    !real *8, allocatable, dimension (:, :) :: feat, feat2
    !real *8, allocatable, dimension (:, :, :) :: feat_type, feat2_type
    !integer, allocatable, dimension (:) :: num_neigh !, num, num_atomtype
    !integer, allocatable, dimension (:, :) :: list_neigh, ind_type  
    !real *8, allocatable, dimension (:, :, :, :) :: dfeat, dfeat2
    !real *8, allocatable, dimension (:, :, :) :: dfeat_type, dfeat2_type  
    !real *8, allocatable, dimension (:, :) :: aa                                !calc_linear无用数据
    !real *8, allocatable, dimension (:) :: bb  
    !real *8, allocatable, dimension (:, :, :) :: gfeat_type                     !calc_linear无用数据
    !real *8, allocatable, dimension (:, :) :: gfeat_tmp                         !calc_linear无用数据  
    !real *8, allocatable, dimension (:, :, :) :: aa_type                        !calc_linear无用数据
    !real *8, allocatable, dimension (:, :) :: bb_type, bb_type0  
    !real *8, allocatable, dimension (:, :) :: ss_tmp, ss_tmp2                   !calc_linear无用数据  
    !integer, allocatable, dimension (:) :: ipiv                                 !calc_linear无用数据  
    !real *8, allocatable, dimension (:, :) :: w_feat                            !calc_linear无用数据
    !real *8, allocatable, dimension (:, :, :) :: feat2_ref                      !calc_linear无用数据  
    !real *8, allocatable, dimension (:, :, :) :: pv
    !real *8, allocatable, dimension (:, :) :: feat2_shift, feat2_scale  
    !real *8, allocatable, dimension (:, :) :: ww, vv, qq                        !calc_linear无用数据
    !real *8, allocatable, dimension (:, :, :, :) :: ss  
    !real *8, allocatable, dimension (:, :) :: gfeat2, dgfeat2                   !calc_linear无用数据  
    !real *8, allocatable, dimension (:, :) :: force, force_pred  
    !integer, allocatable, dimension (:) :: num_inv                              !calc_linear无用数据
    !integer, allocatable, dimension (:, :) :: index_inv, index_inv2             !calc_linear无用数据
    !character (len=80) dfeat_n(400)  
    !integer, allocatable, dimension (:) ::  num_ref, num_refi, nfeat0, nfeat2,nfeat2i  
    !cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
  
  
  
  
  !!!!!!!!!!!!!          以下为  module variables     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  
  
    character(80),parameter :: fit_input_path0="fit.input"
    character(80),parameter :: model_coefficients_path0="linear_fitB.ntype"
    character(80),parameter :: weight_feat_path_header0="weight_feat."
    character(80),parameter :: feat_pv_path_header0="feat_PV."
    
    character(200) :: fit_input_path=trim(fit_input_path0)
    character(200) :: model_coefficients_path=trim(model_coefficients_path0)
    character(200) :: weight_feat_path_header=trim(weight_feat_path_header0)
    character(200) :: feat_pv_path_header=trim(feat_pv_path_header0)
  
    integer(4) :: ntype                                    !模型所有涉及的原子种类
    integer(4) :: m_neigh                                  !模型所使用的最大近邻数(考虑这个数是否可以不用)
    integer(4) :: nfeat0m                                  !不同种原子的原始feature数目中最大者(目前似无意义)
    integer(4) :: nfeat2m                                  !不同种原子的PCA之后feature数目中最大者
    integer(4) :: nfeat2tot                                !PCA之后各种原子的feature数目之和
    integer(4),allocatable,dimension(:) :: nfeat0          !各种原子的原始feature数目
    integer(4),allocatable,dimension(:) :: nfeat2          !各种原子PCA之后的feature数目
    integer(4),allocatable,dimension(:) :: nfeat2i         !用来区分计算时各段各属于哪种原子的分段端点序号
    integer(4),allocatable,dimension(:) :: num_ref         !各种原子取的reference points的数目(对linear无意义)
    integer(4),allocatable,dimension(:) :: num_refi        !用来区分各种原子的reference points的分段端点序号(对linear无意义)
  
  
    real(8),allocatable,dimension(:) :: bb                 !计算erergy和force时与new feature相乘的系数向量w
    real(8),allocatable,dimension(:,:) :: bb_type          !不明白有何作用,似乎应该是之前用的变量
    real(8),allocatable,dimension(:,:) :: bb_type0         !将bb分别归类到不同种类的原子中，第二维才是代表原子种类
    real(8),allocatable,dimension (:, :) :: w_feat         !不同reference points的权重(对linear无意义)
  
    real(8),allocatable,dimension(:,:,:) :: pv             !PCA所用的转换矩阵
    real(8),allocatable,dimension (:,:) :: feat2_shift     !PCA之后用于标准化feat2的平移矩阵
    real(8),allocatable,dimension (:,:) :: feat2_scale     !PCA之后用于标准化feat2的伸缩系数矩阵
    
    
    integer(4) :: natom                                    !image的原子个数  
    integer(4),allocatable,dimension(:) :: num             !属于每种原子的原子个数，但似乎在calc_linear中无用
    integer(4),allocatable,dimension(:) :: num_atomtype    !属于每种原子的原子个数，似是目前所用的
    integer(4),allocatable,dimension(:) :: itype_atom      !每一种原子的原子属于第几种原子
    integer(4),allocatable,dimension(:) :: iatom           !每种原子的原子序数列表，即atomTypeList
    integer(4),allocatable,dimension(:) :: iatom_type      !每种原子的种类，即序数在种类列表中的序数
    
    real(8),allocatable,dimension(:) :: energy_pred        !每个原子的能量预测值
    real(8),allocatable,dimension(:,:) :: force_pred       !每个原子的受力预测值
    real(8) :: etot_pred
    character(200) :: error_msg
    integer(4) :: istat
    
    
  
  !!!!!!!!!!!!!          以上为  module variables     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  
    contains
    
  
   
    subroutine set_paths(fit_dir_input)
        character(*),intent(in) :: fit_dir_input
        character(:),allocatable :: fit_dir,fit_dir_simp
        integer(4) :: len_dir
        fit_dir_simp=trim(adjustl(fit_dir_input))
        len_dir=len(fit_dir_simp)
        if (len_dir/=0 .and. fit_dir_simp/='.')then
            if (fit_dir_simp(len_dir:len_dir)=='/')then
                fit_dir=fit_dir_simp(:len_dir-1)
            else
                fit_dir=fit_dir_simp
            end if
            fit_input_path=fit_dir//'/'//trim(fit_input_path0)
            model_coefficients_path=fit_dir//'/'//trim(model_coefficients_path0)
            weight_feat_path_header=fit_dir//'/'//trim(weight_feat_path_header0)
            feat_pv_path_header=fit_dir//'/'//trim(feat_pv_path_header0)
        end if
    end subroutine set_paths
    
    subroutine load_model()
    
        integer(4) :: nimage,num_refm,num_reftot,nfeat0_tmp,nfeat2_tmp,itype,i,k,ntmp,itmp
        real(8) :: dist0
    
        open (10, file=trim(fit_input_path))
        rewind (10)
        read (10, *) ntype, natom, m_neigh, nimage         !(nimage对md计算的模型无意义，natom是之后set_image_info中应读入的数据，此处读入没有意义)
      !       allocate(itype_atom(ntype))
        if (allocated(itype_atom)) then
            deallocate(itype_atom)
            deallocate(nfeat0)
            deallocate (nfeat2)
            deallocate (num_ref)
            deallocate (num_refi)
            deallocate (nfeat2i)
            deallocate (num)                              !image数据,在此处allocate，但在set_image_info中赋值
            deallocate (num_atomtype)                     !image数据,在此处allocate，但在set_image_info中赋值
            deallocate (bb)
            deallocate (bb_type)
            deallocate (bb_type0)
            deallocate (pv)
            deallocate (feat2_shift)
            deallocate (feat2_scale)
        end if
        
        allocate (itype_atom(ntype))
        allocate (nfeat0(ntype))
        allocate (nfeat2(ntype))
        allocate (num_ref(ntype))
        allocate (num_refi(ntype))
        allocate (nfeat2i(ntype))
        
        allocate (num(ntype))                              !image数据,在此处allocate，但在set_image_info中赋值
        allocate (num_atomtype(ntype))                     !image数据,在此处allocate，但在set_image_info中赋值
        
        do i = 1, ntype
            read (10, *) itype_atom(i), nfeat0(i), nfeat2(i), num_ref(i)     !num_ref对linear无意义,nfeat0对每种元素其实都一样
        end do
            !read (10, *) alpha, dist0
            !read (10, *) weight_e, weight_e0, weight_f, delta
        close (10)
        
        dist0 = dist0**2
        nfeat0m = 0
        nfeat2m = 0
        num_refm = 0
        num_reftot = 0
        num_refi(1) = 0
        nfeat2tot = 0
        nfeat2i = 0
        nfeat2i(1) = 0
        
        do i = 1, ntype
            if (nfeat0(i)>nfeat0m) nfeat0m = nfeat0(i)
            if (nfeat2(i)>nfeat2m) nfeat2m = nfeat2(i)
            if (num_ref(i)>num_refm) num_refm = num_ref(i)
            num_reftot = num_reftot + num_ref(i)
            nfeat2tot = nfeat2tot + nfeat2(i)
            if (i>1) then
                num_refi(i) = num_refi(i-1) + num_ref(i-1)
                nfeat2i(i) = nfeat2i(i-1) + nfeat2(i-1)
            end if
        end do
        allocate (bb(nfeat2tot))
        allocate (bb_type(nfeat2m,ntype))
        allocate (bb_type0(nfeat2m,ntype))
        
        open (12, file=trim(model_coefficients_path))
        rewind (12)
        read (12, *) ntmp
        if (ntmp/=nfeat2tot) then
            write (6, *) 'ntmp.not.right,linear_fitb.ntype', ntmp, nfeat2tot
            stop
        end if
        do i = 1, nfeat2tot
            read (12, *) itmp, bb(i)
        end do
        close (12)
        do itype = 1, ntype
            do k = 1, nfeat2(itype)
                bb_type0(k, itype) = bb(k+nfeat2i(itype))
            end do
        end do
        
        allocate (pv(nfeat0m,nfeat2m,ntype))
        allocate (feat2_shift(nfeat2m,ntype))
        allocate (feat2_scale(nfeat2m,ntype))
        
        do itype = 1, ntype
            open (11, file=trim(feat_pv_path_header)//char(itype+48), form='unformatted')
            rewind (11)
            read (11) nfeat0_tmp, nfeat2_tmp
            if (nfeat2_tmp/=nfeat2(itype)) then
                write (6, *) 'nfeat2.not.same,feat2_ref', itype, nfeat2_tmp, nfeat2(itype)
                stop
            end if
            if (nfeat0_tmp/=nfeat0(itype)) then
                write (6, *) 'nfeat0.not.same,feat2_ref', itype, nfeat0_tmp, nfeat0(itype)
                stop
            end if
            read (11) pv(1:nfeat0(itype), 1:nfeat2(itype), itype)
            read (11) feat2_shift(1:nfeat2(itype), itype)
            read (11) feat2_scale(1:nfeat2(itype), itype)
            close (11)
        end do
        
    end subroutine load_model
  
    subroutine set_image_info(atom_type_list,is_reset)
        integer(4) :: i,j,itype,iitype
        integer(4),dimension(:),intent(in) :: atom_type_list
        logical,intent(in) :: is_reset
        integer(4) :: image_size
        
        
        image_size=size(atom_type_list)
        if (is_reset .or. (.not. allocated(iatom)) .or. image_size/=natom) then
        
            if (allocated(iatom))then
                if (image_size==natom .and. maxval(abs(atom_type_list-iatom))==0) then
                    return
                end if
                deallocate(iatom)
                !deallocate(num_atomtype) !此似乎应该在load_model中allocate,但赋值似应在此subroutine
                !deallocate(num)          !此似乎应该在load_model中allocate,但赋值似应在此subroutine
                !deallocate(itype_atom)   !此似乎应该在load_model中allocate,但赋值似应在此subroutine
                deallocate(iatom_type)
                deallocate(energy_pred)
                deallocate(force_pred)
            end if
              
            natom=image_size
            allocate(iatom(natom))
            allocate(iatom_type(natom))
            allocate(energy_pred(natom))
            allocate(force_pred(3,natom))
            !allocate()
              
              
              
            iatom=atom_type_list
              
            do i = 1, natom
                iitype = 0
                do itype = 1, ntype
                    if (itype_atom(itype)==iatom(i)) then
                        iitype = itype
                    end if
                end do
                if (iitype==0) then
                    write (6, *) 'this type not found', iatom(i)
                end if
                iatom_type(i) = iitype
            end do
      
            num_atomtype = 0
            do i = 1, natom
                itype = iatom_type(i)
                num_atomtype(itype) = num_atomtype(itype) + 1
            end do
        end if
        
    end subroutine set_image_info
  
    subroutine cal_energy_force(feat,dfeat,num_neigh,list_neigh)
        integer(4)  :: itype,ixyz,i,j,jj
        real(8) :: sum
        real(8),dimension(:,:),intent(in) :: feat
        real(8),dimension(:,:,:,:),intent(in) :: dfeat
        integer(4),dimension(:),intent(in) :: num_neigh
        integer(4),dimension(:,:),intent(in) :: list_neigh
        !real(8),dimension(:) :: energy_pred
        !real(8),dimension(:,:) :: force_pred
        
        
        
        
        real(8),allocatable,dimension(:,:) :: feat2
        real(8),allocatable,dimension(:,:,:) :: feat_type
        real(8),allocatable,dimension(:,:,:) :: feat2_type
        integer(4),allocatable,dimension(:,:) :: ind_type
        real(8),allocatable,dimension(:,:,:) :: dfeat_type
        real(8),allocatable,dimension(:,:,:) :: dfeat2_type
        real(8),allocatable,dimension(:,:,:,:) :: dfeat2
        real(8),allocatable,dimension(:,:,:,:) :: ss
        integer(4),dimension(2) :: feat_shape,list_neigh_shape
        integer(4),dimension(4) :: dfeat_shape
        
        open(99,file='log.txt')
        
        !allocate(energy_pred(natom))
        !allocate(force_pred(3,natom))
        allocate(feat2(nfeat2m,natom))
        allocate(feat_type(nfeat0m,natom,ntype))
        allocate(feat2_type(nfeat2m,natom,ntype))
        allocate(ind_type(natom,ntype))
        allocate(dfeat_type(nfeat0m,natom*m_neigh*3,ntype))
        allocate(dfeat2_type(nfeat2m,natom*m_neigh*3,ntype))
        allocate(dfeat2(nfeat2m,natom,m_neigh,3))
        allocate(ss(nfeat2m,natom,3,ntype))
        feat_shape=shape(feat)
        dfeat_shape=shape(dfeat)
        list_neigh_shape=shape(list_neigh)
        istat=0
        error_msg=''
        !open(99,file='log.txt',position='append')
        write(*,*)'feat_shape'
        write(*,*)feat_shape
        write(*,*)'dfeat_shape'
        write(*,*)dfeat_shape
        write(*,*)'list_neigh_shape'
        write(*,*)list_neigh_shape
        write(*,*)"nfeat0m,natom,m_neigh"
        write(*,*)nfeat0m,natom,m_neigh
        !close(99)
        !open(99,file='log.txt',position='append')
        if (feat_shape(1)/=nfeat0m .or. feat_shape(2)/=natom &
             .or. dfeat_shape(1)/=nfeat0m .or. dfeat_shape(2)/=natom .or. dfeat_shape(4)/=3 &
             .or. size(num_neigh)/=natom  .or. list_neigh_shape(2)/=natom) then      
            
            write(99,*) "Shape of input arrays don't match the model!"
            istat=1
            !if (allocated(error_msg)) then
                !deallocate(error_msg)
            !end if
            error_msg="Shape of input arrays don't match the model!"
            return
        end if
        !allocate (feat2(nfeat2m,natom))
        !allocate (feat_type(nfeat0m,natom,ntype))
        !allocate (feat2_type(nfeat2m,natom,ntype))
        !allocate (ind_type(natom,ntype))
        !allocate (dfeat_type(nfeat0m,natom*m_neigh*3,ntype))
        !allocate (dfeat2_type(nfeat2m,natom*m_neigh*3,ntype))
        !allocate (dfeat2(nfeat2m,natom,m_neigh,3))    
        !allocate (ss(nfeat2m,natom,3,ntype))
        
        
        !write(99,*) "all arrays shape right"
        !close(99)
        !open(99,file='log.txt',position='append')
        
        
        num = 0
        do i = 1, natom
            itype = iatom_type(i)
            num(itype) = num(itype) + 1
            ind_type(num(itype), itype) = i
            feat_type(:, num(itype), itype) = feat(:, i)
         end do
    
        !write(99,*)"feat_type normlly setted"
        !close(99)
        !open(99,file='log.txt',position='append')
        
        do itype = 1, ntype
            call dgemm('T', 'N', nfeat2(itype), num(itype), nfeat0(itype), 1.d0, pv(1,1,itype), nfeat0m, feat_type(1,1,itype), nfeat0m, 0.d0,feat2_type(1,1,itype), nfeat2m)
        end do
    
        !write(99,*)"feat2_type normlly setted first time"
        
        do itype = 1, ntype
            do i = 1, num(itype)
                do j = 1, nfeat2(itype) - 1
                    feat2_type(j, i, itype) = (feat2_type(j,i,itype)-feat2_shift(j,itype))*feat2_scale(j, itype)
                end do
                feat2_type(nfeat2(itype), i, itype) = 1.d0
            end do
        end do
          
        !write(99,*)"feat2_type normlly setted second time"
        !close(99)
        !open(99,file='log.txt',position='append')
        
        num = 0
        do i = 1, natom
            itype = iatom_type(i)
            num(itype) = num(itype) + 1
            feat2(:, i) = feat2_type(:, num(itype), itype)
        end do
          
        !write(99,*)"feat2 normlly setted first time"
        !close(99)
        !open(99,file='log.txt',position='append')
        
        do i = 1, natom
            itype = iatom_type(i)
            sum = 0.d0
            do j = 1, nfeat2(itype)
              sum = sum + feat2(j, i)*bb_type0(j, itype)
            end do
            energy_pred(i) = sum
        end do
        
        !write(99,*)"energy_pred normlly setted"
        !close(99)
        !open(99,file='log.txt',position='append')
        
        num = 0
        do i = 1, natom
            do jj = 1, num_neigh(i)
                itype = iatom_type(list_neigh(jj,i)) ! this is this neighbor's typ
                num(itype) = num(itype) + 1
                dfeat_type(:, num(itype), itype) = dfeat(:, i, jj, 1)
                num(itype) = num(itype) + 1
                dfeat_type(:, num(itype), itype) = dfeat(:, i, jj, 2)
                num(itype) = num(itype) + 1
                dfeat_type(:, num(itype), itype) = dfeat(:, i, jj, 3)
            end do
        end do
        !cccccccc note: num(itype) is rather large, in the scane of natom*num_neigh
    
        do itype = 1, ntype
            call dgemm('T', 'N', nfeat2(itype), num(itype), nfeat0(itype), 1.d0, pv(1,1,itype), nfeat0m, dfeat_type(1,1,itype), nfeat0m, 0.d0, dfeat2_type(1,1,itype), nfeat2m)
        end do
    
        !write(99,*)"dfeat2_type normlly setted first time"
        !close(99)
        !open(99,file='log.txt',position='append')
        
        num = 0
        do i = 1, natom
            do jj = 1, num_neigh(i)
                itype = iatom_type(list_neigh(jj,i)) ! this is this neighbor's typ
                num(itype) = num(itype) + 1
                do j = 1, nfeat2(itype) - 1
                    dfeat2(j, i, jj, 1) = dfeat2_type(j, num(itype), itype)*feat2_scale(j, itype)
                end do
                dfeat2(nfeat2(itype), i, jj, 1) = 0.d0
                num(itype) = num(itype) + 1
                do j = 1, nfeat2(itype) - 1
                    dfeat2(j, i, jj, 2) = dfeat2_type(j, num(itype), itype)*feat2_scale(j, itype)
                end do
                dfeat2(nfeat2(itype), i, jj, 2) = 0.d0
                num(itype) = num(itype) + 1
                do j = 1, nfeat2(itype) - 1
                    dfeat2(j, i, jj, 3) = dfeat2_type(j, num(itype), itype)*feat2_scale(j, itype)
                end do
                dfeat2(nfeat2(itype), i, jj, 3) = 0.d0
            end do
        end do
        !write(99,*)"dfeat2 normlly setted"
        !close(99)
        !open(99,file='log.txt',position='append')
        
        !cccccccccccccccccccccccccccccccccccccccccccccccccccccccc
        !cc  now, dfeat2 is:
        !cc dfeat2(nfeat2,natom,j_neigh,3): dfeat2(j,i,jj,3)= d/dr_i(feat2(j,list_neigh(jj,i))
        !cccccccccccccccccccccccccccccccccccccccccccccccccccccccc
        !cccc now, we have the new features, we need to calculate the distance to reference state
    
        ss = 0.d0
    
        do i = 1, natom
            do jj = 1, num_neigh(i)
                itype = iatom_type(list_neigh(jj,i)) ! this is this neighbor's typ
                do j = 1, nfeat2(itype)    
                    ss(j, i, 1, itype) = ss(j, i, 1, itype) + dfeat2(j, i, jj, 1)
                    ss(j, i, 2, itype) = ss(j, i, 2, itype) + dfeat2(j, i, jj, 2)
                    ss(j, i, 3, itype) = ss(j, i, 3, itype) + dfeat2(j, i, jj, 3)
                end do
            end do
        end do
    
        !write(99,*)"ss normlly setted"
        !close(99)
        !open(99,file='log.txt',position='append')
         
        do i = 1, natom
            do ixyz = 1, 3
                sum = 0.d0
                do itype = 1, ntype
                    do j = 1, nfeat2(itype)
                        sum = sum + ss(j, i, ixyz, itype)*bb_type0(j, itype)
                    end do
                end do
                force_pred(ixyz, i) = sum
            end do
        end do
        
        !write(99,*)"force_pred normlly setted"
        !close(99)
        !open(99,file='log.txt',position='append')
        
        etot_pred = 0.d0
        do i = 1, natom
            !etot = etot + energy(i)
            etot_pred = etot_pred + energy_pred(i)
        end do
          
        !write(99,*)"etot_pred normlly setted"
        !write(99,*)"energy_pred",shape(energy_pred)
        !write(99,*)energy_pred
        !write(99,*)"force_pred",shape(force_pred)
        !write(99,*)force_pred
        close(99)
        
        deallocate(feat2)
        deallocate(feat_type)
        deallocate(feat2_type)
        deallocate(ind_type)
        deallocate(dfeat_type)
        deallocate(dfeat2_type)
        deallocate(dfeat2)
        deallocate(ss)
    end subroutine cal_energy_force
  
  
    !allocate (iatom_type(natom))      !每种原子的种类，即序数在种类列表中的序数,即是第一类第二类原子诸如此类,已在之前的地方allocate
    !allocate (iatom(natom))           !每种原子的原子序数列表，即atomTypeList，已在之前的地方allocate
    !allocate (energy(natom))         !module中不必考虑这个
        
    
    !allocate (ipiv(nfeat2tot))                       !calc_linear无用数据
    !allocate (num_inv(natom))                        !calc_linear无用数据
    !allocate (index_inv(3*m_neigh,natom))            !calc_linear无用数据
    !allocate (index_inv2(3*m_neigh,natom))           !calc_linear无用数据
    !allocate (force(3,natom))                        !module中不必考虑这个
    !allocate (vv(nfeat2tot,3*natom))                 !calc_linear无用数据
    
  
  
   
end module calc_lin
  
  
  